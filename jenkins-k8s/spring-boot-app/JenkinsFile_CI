pipeline {
    agent {
        docker {
            image 'techielins/docker-jenkins-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
            environment {
                RELEASE_NAME = "RELEASE"
                RELEASE_VERSION = "1.0.0"
                DOCKER_IMAGE = "techielins/spring-boot-demo:${RELEASE_NAME}-${RELEASE_VERSION}-${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker_creds')
                CONTAINER_NAME = "my-container-name" // Define the container name
            }

    stages {
        stage('Get Code') {
            steps {
                catchError(buildResult: 'FAILURE') {
                    sh 'cat /etc/issue'
                    sh 'git --version'
                    sh 'which git'
                    sh 'echo $PATH'
                    sh 'docker --version'
                    sh 'mvn --version'

                    git branch: 'main', url: 'https://github.com/techielins/CICDPipeline.git'
                }
            }
        }

        stage('Build and Test') {
            steps {
                catchError(buildResult: 'FAILURE') {
                    sh 'cd jenkins-k8s/spring-boot-app && mvn clean package'
                    sh 'ls -ltr jenkins-k8s'
                }
            }
        }

        stage('Build and Push Docker Image') {

            steps {
                catchError(buildResult: 'FAILURE') {
                    script {
                        sh 'cd jenkins-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                        def dockerImage = docker.image("${DOCKER_IMAGE}")
                        docker.withRegistry('https://index.docker.io/v1/', "docker_creds") {
                            dockerImage.push()
                        }
                    }
                }
            }
        }

    }

    post {
        failure {
            // Add a post-failure stage to delete the Docker container
            script {
                sh "docker stop ${CONTAINER_NAME}" // Stop the container
                sh "docker rm ${CONTAINER_NAME}"   // Remove the container
            }
        }
    }
}
