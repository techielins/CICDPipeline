//Jenkins Pipeline file

pipeline {

  agent {
    docker {
      image 'techielins/docker-jenkins-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }

  stages {
      
    // checkout the code  
    stage('Get Code') {
      steps {
       sh 'cat /etc/issue'
       sh 'git --version'
       sh 'which git'
       sh 'echo $PATH'
       sh 'docker --version'
       sh 'mvn --version'

        git branch: 'main', url: 'https://github.com/techielins/CICDPipeline.git'
              }
    }
    
    // build the project and create the JAR file
    stage('Build and Test') {
      steps {
        
        sh 'cd jenkins-k8s/spring-boot-app && mvn clean package'
        sh 'ls -ltr jenkins-k8s'
      }
    }
stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "techielins/spring-boot-demo:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker_creds')
      }
      steps {
        script {
            //Docker file location jenkins-k8s/spring-boot-app/Dockerfile"
            sh 'cd jenkins-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker_creds") {
                dockerImage.push()
            }
        }
      }
    }

  }

    
}
